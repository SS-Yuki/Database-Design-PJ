CREATE TABLE IF NOT EXISTS repository (repositoryId INT PRIMARY KEY AUTO_INCREMENT,repositoryName VARCHAR(30) NOT NULL,baseDir VARCHAR(50) NOT NULL);
CREATE TABLE IF NOT EXISTS branch (branchId INT PRIMARY KEY AUTO_INCREMENT,repositoryId INT NOT NULL,branchName VARCHAR(30) NOT NULL,foreign key(repositoryId) references repository(repositoryId));
CREATE TABLE IF NOT EXISTS git_commit (commitId INT PRIMARY KEY AUTO_INCREMENT,branchId INT NOT NULL,commitHash VARCHAR(100) NOT NULL,commitTime DATETIME NOT NULL,committer VARCHAR(50) NOT NULL,foreign key(branchId) references branch(branchId));
CREATE TABLE IF NOT EXISTS issue_case (issueCaseId INT PRIMARY KEY AUTO_INCREMENT,appearCommitId INT,solveCommitId INT,issueCaseStatus ENUM ('SOLVED','UNSOLVED'),issueCaseType ENUM ('BUG','VULNERABILITY','CODE_SMELL'),foreign key(appearCommitId) references git_commit(commitId),foreign key(solveCommitId) references git_commit(commitId));
CREATE TABLE IF NOT EXISTS issue_instance (issueInstanceId INT PRIMARY KEY AUTO_INCREMENT,issueCaseId INT,commitId INT(20),issueInstanceStatus ENUM ('APPEAR','DISAPPEAR'),fileName VARCHAR(100) NOT NULL,foreign key(issueCaseId) references issue_case(issueCaseId));
CREATE TABLE IF NOT EXISTS issue_location (issueInstanceId INT,locationOrder INT,startLine INT NOT NULL,endLine INT NOT NULL,primary key(issueInstanceId,locationOrder),foreign key(issueInstanceId) references issue_instance(issueInstanceId));